#!/bin/bash
<%
master = link("db").instances.first.address
slaves = []
link("db").instances.each do |instance|
  if instance.address != master
    slaves.push(instance.address)
  end
end
%>

set -u # report the usage of uninitialized variables

# Setup env vars and folders for the webapp_ctl script
source /var/vcap/jobs/smoke-tests/helpers/ctl_setup.sh 'smoke-tests'

check() {
    echo
    date
    pgrt -M <%= master %> \<% slaves.each do |slave| %>
         -S <%= slave %> \<% end %>
         -u <%= p('postgres.smoke-tests.target.username') %> \
         -w <%= p('postgres.smoke-tests.target.password') %> \
         -p <%= p('postgres.smoke-tests.backend.port') %> \
         -l <%= p('postgres.smoke-tests.thresholds.replication-lag', 64) * 1024 %>
    return $?
}

EXITSTATUS=0

# create the .pgpass file
rm -f ~/.pgpass
echo "*:*:*:<%= p('postgres.smoke-tests.target.username') %>:<%= p('postgres.smoke-tests.target.password') %>" \
    > ~/.pgpass
chmod 0600 ~/.pgpass

echo "INITIALIZING PGBENCH DATABASE"
pgbench -h <%= master %> \
        -p <%= p('postgres.smoke-tests.target.port') %> \
        -U <%= p('postgres.smoke-tests.target.username') %> \
        -i 2>&1

echo "STARTING PGBENCH IN THE BACKGROUND"
CPUS=$(grep -c ^processor /proc/cpuinfo)
CLIENTS=<%= p('postgres.smoke-tests.target.clients') %>
CLIENTS=$(( CLIENTS - (CLIENTS % CPUS) + CPUS ))
time \
pgbench -h <%= master %> \
        -p <%= p('postgres.smoke-tests.target.port') %> \
        -U <%= p('postgres.smoke-tests.target.username') %> \
        -c ${CLIENTS} -j ${CPUS} -T 125 -C 2>&1 &
PGBENCH=$!

for x in $(seq 1 120); do
    check || EXITSTATUS=$?
    sleep 1
done

echo
echo "done with tests; waiting for pgbench to finish up"
echo
wait $PGBENCH

echo
echo "pgbench exited $?"
echo


psql -h <%= master %> \
     -p <%= p('postgres.smoke-tests.target.port') %> \
     -U <%= p('postgres.smoke-tests.target.username') %> \
     --file "/var/vcap/jobs/smoke-tests/sql/pgbench_cleanup.sql"

echo "---------------------------------------------"
echo "Errand smoke-tests is complete; exit status $EXITSTATUS"
exit $EXITSTATUS
