#!/bin/bash
set -eu

# Setup env vars and folders for the webapp_ctl script
source /var/vcap/jobs/pgpool/helpers/ctl_setup.sh 'pgpool'
exec >>$LOG_DIR/$JOB_NAME.log 2>&1

export LANG=en_US.UTF-8

# locksdir is where this BOSH release will store lock files,
# used to keep things in sync as we spin up all the components
# (postgres, pgpool, haproxy) in a fully-replicated setup
locksdir=/var/vcap/sys/run/postgres/locks
mkdir -p ${locksdir}

cleanup_procs() {
  if [[ -n "$(pgrep pgpool)" ]]; then
    kill -TERM $(pgrep pgpool)
    sleep 2
    if [[ -n "$(pgrep pgpool)" ]]; then
      kill -KILL $(pgrep pgpool)
    fi
  fi
}

case $1 in

  start)
    echo "[pgpool] starting up..."

    if [[ ! -f ${locksdir}/POSTGRES ]]; then
      echo "[pgpool] postgres is still down; bailing..."
      exit 1
    fi

    pid_guard $PIDFILE $JOB_NAME

    # (possibly) create an empty pgpool passwd authdb
    touch ${JOB_DIR}/config/passwd

    # clean up from any previous runs
    echo "[pgpool] cleaning up from previous run: $(pgrep pgpool)"
    cleanup_procs

    rm -f /var/vcap/sys/run/pgpool/.s.PGSQL.<%= p('pgpool.config.port',     5432) %> \
          /var/vcap/sys/run/pgpool/.s.PGSQL.<%= p('pgpool.config.pcp_port', 9898) %>

    # run pgpool
    echo "[pgpool] starting pgpool, pid $$"
    touch ${locksdir}/PGPOOL
    exec chpst -u vcap:vcap pgpool -n <% if p('pgpool.debug') %>--debug<% end %> \
         -f ${JOB_DIR}/config/pgpool.conf \
         -F ${JOB_DIR}/config/pcp.conf \
         -a ${JOB_DIR}/config/hba.conf
    ;;

  stop)
    kill_and_wait $PIDFILE
    echo "[pgpool] cleaning up leftover processes: $(pgrep pgpool)"
    cleanup_procs
    ;;

  *)
    echo "Usage: pgpool {start|stop}"
    ;;

esac
exit 0
