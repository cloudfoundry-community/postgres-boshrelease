#!/bin/bash
<%

masterip    = link("db").instances.first.address
replication = p('postgres.replication.enabled', false) && masterip != ''
master      = replication && spec.index == 0
port        = p('postgres.config.port')

%>
# first, some diagnostic info
# ---------------------------
#    masterip | '<%= masterip %>'
#  spec.index | <%= spec.index %>
#        port | <%= port %>
# replication | <%= replication %>
#      master | <%= master %>
#

set -e # exit immediately if a simple command exits with a non-zero status
set -u # report the usage of uninitialized variables

# Setup env vars and folders for the webapp_ctl script
source /var/vcap/jobs/postgres/helpers/ctl_setup.sh 'postgres'

export PORT=${PORT:-5000}
export LANG=en_US.UTF-8


# datadir is where PostgreSQL will store the database files.  This really
# *shouuld* be a persistent disk, unless you know what you are doing.
datadir=/var/vcap/store/postgres/db

# construct the list of options to pass to pg_ctl.  These mostly get passed
# onto the `postgres` process on startup, but the `-p` flag is used by the
# "wait" feature (-w) to ensure that the database has finished booting.
opts="-p <%= port %>"
opts="${opts} -c external_pid_file=${PIDFILE}"
opts="${opts} -c data_directory=${datadir}"
opts="${opts} -c config_file=${JOB_DIR}/config/postgresql.conf"
opts="${opts} -c hba_file=${JOB_DIR}/config/hba.conf"
opts="${opts} -c ident_file=${JOB_DIR}/config/ident.conf"

<% if p('postgres.tuning.enable') %>
# set some ulimits...
ulimit -v unlimited
<% if p('postgres.tuning.limits.fds') != 'auto'
%>ulimit -n <%= p('postgres.tuning.limits.fds') %>
<% end
   end %>

case $1 in

  start)
    pid_guard $PIDFILE $JOB_NAME

<% if p('postgres.tuning.enable') %>
    # tune that kernel!
    COMMIT_TUNING=1 ${JOB_DIR}/bin/tune \
      >>$LOG_DIR/$JOB_NAME.log 2>&1
<% end %>

    if [[ ! -d ${datadir} ]]; then
      (
<% if replication && master %>
        echo >&2 "[repl:master] DATADIR (${datadir}) not found; initializing"
        chpst -u vcap:vcap pg_ctl -D ${datadir} initdb \
          || rm -rf ${datadir}
<% elsif replication && !master %>
        echo >&2 "[repl:slave] DATADIR (${datadir}) not found; seeding from preferred master (<%= masterip %>)"
        chpst -u vcap:vcap pg_basebackup -h <%= masterip %> -p <%= port %> -D ${datadir} -P -U replication --xlog-method=stream -R \
          || rm -rf ${datadir}
<% else %>
        echo >&2 "[standalone] DATADIR (${datadir}) not found; initializing"
        chpst -u vcap:vcap pg_ctl -D ${datadir} initdb \
          || rm -rf ${datadir}
<% end %>
      ) >>$LOG_DIR/$JOB_NAME.log 2>&1
    fi

    # run postgres!
    chpst -u vcap:vcap pg_ctl -o "${opts}" -D ${datadir} -w -t 30 start \
         >>$LOG_DIR/$JOB_NAME.log 2>&1

<% if replication && master %>
    echo >>$LOG_DIR/$JOB_NAME.log "[repl:master] setting up replication"
    psql -p <%= port %> -U vcap postgres \
         < ${JOB_DIR}/sql/setup-replication.sql \
         >>$LOG_DIR/$JOB_NAME.log 2>&1
<% end %>

(set +e
    cat <<EOF
-----------------------------------------------------------------
NOTE: you MAY see lots of failure here.

Specifically, if this node is a read slave, all of the ROLE and
DATABASE creation / alteration calls will fail because we are in
a "read-only transaction".

On the write master, you may see failure because the roles and
database already exist.  This is normal, and in the interest of
not accidentally hiding crucial standard error output, we have
opted not to filter out those errors.
-----------------------------------------------------------------

EOF
<% p('pgpool.users', []).each do |user| %>
    echo >>$LOG_DIR/$JOB_NAME.log "[postgres] setting up user <%= user['username'] %>"
    echo "[$(date)] setting up user <%= user['username'] %>"
    <% admin = '-DRS' %> 
    <% admin = '-drs' if user["admin"] %>     
    set -x

    createuser -U vcap -p <%= port %> <%=admin %> -El <%= user['username'] %>
    createdb   -U vcap -p <%= port %>       -O <%= user['username'] %> <%= user['username'] %>

    psql -p <%= port %> -U vcap postgres -c "ALTER ROLE \"<%= user['username'] %>\" WITH PASSWORD '<%= user['password'] %>'"
    psql -p <%= port %> -U vcap postgres -c "GRANT ALL PRIVILEGES ON DATABASE \"<%= user['username'] %>\" TO \"<%= user['username'] %>\""

    set +x
    echo

<% end %>

<% p('pgpool.databases', []).each do |database| %>
    echo >>$LOG_DIR/$JOB_NAME.log "[postgres] setting up database <%= database['name'] %>"
    set -x

    createdb   -U vcap -p <%= port %>       -O vcap <%= database['name'] %>
    <% database['users'].each do |user| %>
    psql -p <%= port %> -U vcap postgres -c "GRANT ALL PRIVILEGES ON DATABASE \"<%= database['name'] %>\" TO \"<%= user %>\""
    <% end %>

    <% if database["extensions"]
         database["extensions"].each do |ext| %>
         echo "Trying to install <%= ext %>..."
         psql -p <%= port %> -U vcap "<%= database['name'] %>" -c "CREATE EXTENSION IF NOT EXISTS <%= ext %>"
    <%   end
      end %>

    set +x
    echo

<% end %>

)>$LOG_DIR/user-creation.log 2>&1
    ;;

  stop)
    chpst -u vcap:vcap pg_ctl -o "${opts}" -D ${datadir} -w -t 30 -m fast stop \
         >>$LOG_DIR/$JOB_NAME.log 2>&1
    ;;
  *)
    echo "Usage: postgres_ctl {start|stop}"

    ;;

esac
exit 0
